#
# Git smart PROMPT
#
      BLACK="\[\033[0;30m\]"
        RED="\[\033[0;31m\]"
      GREEN="\[\033[0;32m\]"
     YELLOW="\[\033[0;33m\]"
       BLUE="\[\033[0;34m\]"
     PURPLE="\[\033[0;35m\]"
       CYAN="\[\033[0;36m\]"
      WHITE="\[\033[0;37m\]"
LIGHT_BLACK="\[\033[1;30m\]"
   LIGHT_RED="\[\033[1;31m\]"
 LIGHT_GREEN="\[\033[1;32m\]"
LIGHT_YELLOW="\[\033[1;33m\]"
  LIGHT_BLUE="\[\033[1;34m\]"
LIGHT_PURPLE="\[\033[1;35m\]"
  LIGHT_CYAN="\[\033[1;36m\]"
  LIGHT_GRAY="\[\033[1;37m\]"
 COLOR_NONE="\[\e[0m\]"

# interesting but not as good as mine
function _parse_git_dirty() {
  [[ $(git status 2> /dev/null | tail -n1) != *"working directory clean"* ]] && echo "*"
}

function _new_parse_git_branch() {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(_parse_git_dirty)/"
}

function _parse_git_branch {
  # git rev-parse --git-dir &> /dev/null
  git_status="$(git status 2> /dev/null)"
  branch_pattern="^# On branch ([^${IFS}]*)"
  remote_pattern="# Your branch is (.*) of"
  diverge_pattern="# Your branch and (.*) have diverged"
  if [[ ! ${git_status} =~ "working directory clean" ]]; then
    state="${RED}~"
  fi
  # add an else if or two here if you want to get more specific
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="${YELLOW}↑"
    else
      remote="${YELLOW}↓"
    fi
  fi
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="${YELLOW}↕"
  fi
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
    echo " (${branch})${remote}${state}"
  fi
}

function _prompt_func() {
    previous_return_value=$?;
    # prompt="${TITLEBAR}$BLUE[$RED\w$GREEN$(__git_ps1)$YELLOW$(git_dirty_flag)$BLUE]$COLOR_NONE "
    prompt="${TITLEBAR}${LIGHT_BLACK}[${BLUE}\W${GREEN}$(_parse_git_branch)${LIGHT_BLACK}]${COLOR_NONE}"
    if test $previous_return_value -eq 0
    then
        PS1="${prompt}\$${COLOR_NONE} "
    else
        PS1="${prompt}${RED}\$${COLOR_NONE} "
    fi
}

PROMPT_COMMAND=_prompt_func

#PS1='[\[\e[1;34m\]\w\[\e[m\]]\n\[\e[1;32m\]\$\[\e[m\] \[\e[1;37m\]'
#PS1='[\[\e[1;34m\]\w\[\e[m\]]\[\e[1;32m\]\$\[\e[m\] \[\e[1;37m\]'
