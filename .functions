# List defined functions 
function funclist() {
    declare -f | grep "()" | egrep -v "^[_ \$]"
}

# http://jeroenjanssens.com/2013/08/16/quickly-navigate-your-filesystem-from-the-command-line.html
export MARKPATH=$HOME/.marks
function cj() {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark() {
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark() {
    rm -i "$MARKPATH/$1"
}
function marks() {
    # ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
    ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
}
# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [ -n "$@" ]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript
    else # pipe
        python -mjson.tool | pygmentize -l javascript
    fi
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# Get a character’s Unicode code point
function codepoint() {
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# Find an application CFBundleIndentifier
function appid() {
    grep 'CFBundleIdentifier' -A1 "$1Contents/Info.plist" | sed s/string//g | sed s/key//g | sed s/[\<\>\/]//g
}

# Switch DNS
function switchdns() {
    if [ -z "$1" ]; then
        networksetup -setdnsservers Wi-Fi empty
    else
        case $1 in 
            aft)
                networksetup -setdnsservers Wi-Fi 198.27.106.151 192.254.74.201 78.46.231.161
                ;;
            upc)
                networksetup -setdnsservers Wi-Fi 95.77.94.88, 78.96.7.88
                ;;
            opendns)
                networksetup -setdnsservers Wi-Fi 208.67.222.222 208.67.220.220 208.67.220.222 208.67.222.220 
            *)
                echo "Known options: aft, upc, opendns"
                ;;
        esac               
    fi
    sudo killall -HUP mDNSResponder
}

# Node.js NPM
function nodejs_activate_npm {
    export PATH=/usr/local/share/npm/bin:${PATH}
}
function nodejs_deactivate_npm {
    IFS=':' read -a path_segments <<< "${PATH}"
    NEW_PATH=""
    for ps in "${path_segments[@]}"; do
        if [ "/usr/local/share/npm/bin" != "$ps" ]; then
            if [ -z "$NEW_PATH" ]; then
                NEW_PATH=$ps
            else
                NEW_PATH=$NEW_PATH:$ps
            fi
        fi
    done
    echo $NEW_PATH
}

# image handling
# http://brettterpstra.com/2013/07/24/bash-image-tools-for-web-designers/
function imgsize() {
    local width height
    if [ -f "$1" ]; then
        height=$(sips -g pixelHeight "$1"|tail -n 1|awk '{print $2}')
        width=$(sips -g pixelWidth "$1"|tail -n 1|awk '{print $2}')
        echo "${width} x ${height}"
    else
        echo "Image file not found"
    fi
}
